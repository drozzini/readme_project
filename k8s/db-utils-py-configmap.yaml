apiVersion: v1
kind: ConfigMap
metadata:
  name: db-utils-py
  labels:
    app: readme-project
  namespace: default
data:
  db_utils.py: |
    # Utilit√°rios para MariaDB e PostgreSQL
    import os
    DB_TYPE = os.getenv("DB_TYPE", "mariadb").lower()
    if DB_TYPE == "pgsql" or DB_TYPE == "postgresql":
      import psycopg2
      from psycopg2 import sql
    else:
      import mariadb
  
    def get_connection():
      if DB_TYPE == "pgsql" or DB_TYPE == "postgresql":
        return psycopg2.connect(
          user=os.getenv("PG_USER", "postgres"),
          password=os.getenv("PG_PASSWORD", ""),
          host=os.getenv("PG_HOST", "localhost"),
          port=int(os.getenv("PG_PORT", 5432)),
          dbname=os.getenv("PG_DATABASE", "readme_db")
        )
      else:
        return mariadb.connect(
          user=os.getenv("MARIADB_USER", "root"),
          password=os.getenv("MARIADB_PASSWORD", ""),
          host=os.getenv("MARIADB_HOST", "localhost"),
          port=int(os.getenv("MARIADB_PORT", 3306)),
          database=os.getenv("MARIADB_DATABASE", "readme_db")
        )
  
    def init_db():
      conn = get_connection()
      cur = conn.cursor()
      if DB_TYPE == "pgsql" or DB_TYPE == "postgresql":
        # Tabela principal
        cur.execute("""
          CREATE TABLE IF NOT EXISTS readme_results (
            id SERIAL PRIMARY KEY,
            repo VARCHAR(255),
            status VARCHAR(32),
            detalhe TEXT,
            teams_admin TEXT,
            teams_maintainer TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
        """)
        # Tabela relacional
        cur.execute("""
          CREATE TABLE IF NOT EXISTS repo_teams (
            id SERIAL PRIMARY KEY,
            repo VARCHAR(255),
            team VARCHAR(255),
            role VARCHAR(32),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
        """)
      else:
        # Tabela principal
        cur.execute("""
          CREATE TABLE IF NOT EXISTS readme_results (
            id INT AUTO_INCREMENT PRIMARY KEY,
            repo VARCHAR(255),
            status VARCHAR(32),
            detalhe TEXT,
            teams_admin TEXT,
            teams_maintainer TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          ) ENGINE=InnoDB;
        """)
        # Tabela relacional
        cur.execute("""
          CREATE TABLE IF NOT EXISTS repo_teams (
            id INT AUTO_INCREMENT PRIMARY KEY,
            repo VARCHAR(255),
            team VARCHAR(255),
            role VARCHAR(32),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          ) ENGINE=InnoDB;
        """)
      conn.commit()
      cur.close()
      conn.close()
  
    def save_result(repo, status, detalhe, teams_admin=None, teams_maintainer=None, teams_granular=None):
      conn = get_connection()
      cur = conn.cursor()
      if DB_TYPE == "pgsql" or DB_TYPE == "postgresql":
        cur.execute(
          "INSERT INTO readme_results (repo, status, detalhe, teams_admin, teams_maintainer) VALUES (%s, %s, %s, %s, %s)",
          (repo, status, detalhe, teams_admin or '', teams_maintainer or '')
        )
        if teams_granular:
          for t in teams_granular:
            cur.execute(
              "INSERT INTO repo_teams (repo, team, role) VALUES (%s, %s, %s)",
              (repo, t['team'], t['role'])
            )
      else:
        cur.execute(
          "INSERT INTO readme_results (repo, status, detalhe, teams_admin, teams_maintainer) VALUES (?, ?, ?, ?, ?)",
          (repo, status, detalhe, teams_admin or '', teams_maintainer or '')
        )
        if teams_granular:
          for t in teams_granular:
            cur.execute(
              "INSERT INTO repo_teams (repo, team, role) VALUES (?, ?, ?)",
              (repo, t['team'], t['role'])
            )
      conn.commit()
      cur.close()
      conn.close()
  